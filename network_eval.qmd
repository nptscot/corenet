- coherent network
- intermediate zone
- od data

```{r}
library(sf)
library(dplyr)
library(igraph)
library(ggraph)
library(ggplot2)
library(mapview)
library(lwgeom)
library(igraph)
library(tidygraph)
library(sfnetworks)
```

```{r}
rnet_core = sf::st_read("network_eval_file/city_of_edinburgh_2024-12-01_3_coherent_network.geojson")
names(rnet_core)
intermediate_zone = sf::st_read("network_eval_file/SG_IntermediateZone_Bdry_2011.gpkg")
intermediate_zone$geometry = intermediate_zone$geom
names(intermediate_zone)

od_data = itz = readRDS("network_eval_file/desire_lines.Rds")
names(od_data)
lads = sf::read_sf("network_eval_file/la_regions_scotland_bfe_simplified_2023.geojson")
# mapview(intermediate_zone) + mapview(rnet_core, color = "red") + mapview(od_data, color = "blue")

# Define target CRS
crs_target = 27700
# Transform datasets to the target CRS
rnet_core = st_transform(rnet_core, crs = crs_target)
intermediate_zone = st_transform(intermediate_zone, crs = crs_target)
od_data = st_transform(od_data, crs = crs_target)
lads = st_transform(lads, crs = crs_target)
```

#  Spatial Coverage 
```{r}
city_boundary  = lads |> filter(LAD23NM == "City of Edinburgh")
intermediate_zone = st_make_valid(intermediate_zone)
intermediate_zone = st_intersection(intermediate_zone, city_boundary)
od_data = od_data[sf::st_union(city_boundary), , op = sf::st_intersects]
```

# Spatial Coverage

```{r}

buffer_distance = 500

# Create a 500m buffer around each network link
network_buffer = st_buffer(rnet_core, dist = buffer_distance)

# Union all buffer polygons to create a single buffered area
buffer_union = st_union(network_buffer)

# Intersect the buffered area with the city boundary
buffer_intersection = st_intersection(buffer_union, city_boundary)

# Calculate areas
area_buffered = st_area(buffer_intersection)
area_city = st_area(city_boundary)

# Compute Spatial Coverage
spatial_coverage = as.numeric(area_buffered / area_city)
cat("Spatial Coverage:", round(spatial_coverage * 100, 2), "%\n")

mapview(city_boundary) + mapview(network_buffer, color = "blue", alpha = 0.5)
```


```{r}
intermediate_zone$density = intermediate_zone$ResPop2011 / intermediate_zone$StdAreaKm2
# filter out zones if the density is less than 80 precentile
density_threshold = quantile(intermediate_zone$density, 0.3)
intermediate_zone = intermediate_zone |> filter(density > density_threshold)

# Prepare zones
zones = intermediate_zone |>
  select(InterZone, geometry) |>
  st_make_valid()

# Compute W = B_union ∩ A_city
W = buffer_intersection

# Compute W_i for each zone using rowwise and list-columns
zones = zones |>
  rowwise() |>
  mutate(W_i = list(st_intersection(geometry, W))) |>
  ungroup()

# Identify zones with and without intersections
zones = zones |>
  mutate(has_intersection = lengths(W_i) > 0)

# Print zones without intersection
if (any(!zones$has_intersection)) {
  cat("The following zones do not intersect with the buffered area W:\n")
  print(zones$InterZone[!zones$has_intersection])
} else {
  cat("All zones intersect with the buffered area W.\n")
}

# Initialize adjacency matrix
zone_ids = zones$InterZone
num_zones = length(zone_ids)
adj_matrix = matrix(0, nrow = num_zones, ncol = num_zones)
rownames(adj_matrix) = zone_ids
colnames(adj_matrix) = zone_ids

# Create adjacency based on W_i connectivity
for (i in 1:num_zones) {
  for (j in i:num_zones) {
    if (i == j) {
      adj_matrix[i, j] = 1  # A zone is always connected to itself
    } else {
      # Extract geometries from list-column
      geom_i = zones$W_i[[i]]
      geom_j = zones$W_i[[j]]
      
      # Check if W_i and W_j intersect or touch
      intersects = st_intersects(geom_i, geom_j, sparse = FALSE)
      touches = st_touches(geom_i, geom_j, sparse = FALSE)
      
      if (any(intersects) | any(touches)) {
        adj_matrix[i, j] = 1
        adj_matrix[j, i] = 1  # Symmetric matrix
      }
    }
  }
}

all_connected <- all(adj_matrix == 1)
cat("Are all zones inter-connected within W? ", all_connected, "\n")

# Create graph from adjacency matrix
g = graph_from_adjacency_matrix(adj_matrix, mode = "undirected")

# Assume 'g' is your igraph object
comp <- components(g)

# Largest component size
largest_comp_size <- max(comp$csize)

# Total number of zones
total_zones <- length(V(g))

# Fraction of zones in the largest component
fraction_connected <- largest_comp_size / total_zones

# Convert to percentage
percent_connected <- fraction_connected * 100

# Check if all zones are interconnected
all_connected <- (comp$no == 1)

if (all_connected) {
  cat("Are all zones inter-connected within W? YES (100%)\n")
} else {
  cat("Are all zones inter-connected within W? NO, but approximately ",
      round(percent_connected, 1), "% of zones are in the largest connected component.\n")
}


# -------------------------------
# Network Connectivity, how mang components
# -------------------------------



# Compute shortest paths
shortest_paths <- shortest.paths(g)

# Compute various centrality measures
betweenness <- betweenness(g)
closeness <- closeness(g)
degree <- degree(g)

# Determine connected components
components = clusters(g)

# Output connectivity status
if (components$no == 1) {
  cat("The buffered area provides continuous corridors connecting all zones.\n")
} else {
  cat("The buffered area has", components$no, "connected components, indicating fragmentation.\n")
  
  # List zones in each component
  for (k in 1:components$no) {
    cat("Component", k, "includes zones:", paste(zone_ids[components$membership == k], collapse = ", "), "\n")
  }
}

# Create connectivity indicator matrix C(z_i, z_j)
connectivity_matrix = as_adjacency_matrix(g, type = "both")
connectivity_matrix = as.matrix(connectivity_matrix)

# Verify the connectivity matrix dimensions
if (all(dim(connectivity_matrix) == c(num_zones, num_zones))) {
  cat("Connectivity matrix successfully created.\n")
} else {
  cat("Warning: Connectivity matrix dimensions do not match the number of zones.\n")
}

# Calculate centroids of each zone for plotting
zones_centroid = st_centroid(zones)

# Extract coordinates from centroids
coords = st_coordinates(zones_centroid)

# Create a matrix of coordinates
layout_coords = as.matrix(coords[, 1:2])

# Assign row names to match the graph's vertex names
rownames(layout_coords) = zones$InterZone

# Ensure that the order of layout_coords matches the graph's vertex order
layout_coords = layout_coords[V(g)$name, ]

# Plot the graph using ggraph with geographical layout
ggraph(g, layout = "manual", x = layout_coords[,1], y = layout_coords[,2]) +
  geom_edge_link(color = "grey") +
  geom_node_point(color = "skyblue", size = 3) +
  geom_node_text(aes(label = name), vjust = -1, size = 3) +
  theme_minimal() +
  ggtitle("Connectivity Graph with Geographical Layout") +
  coord_fixed()  # Ensures equal scaling on both axes

```

```{r}
# Number of connected components
num_components <- components$no
cat("Number of Connected Components:", num_components, "\n")

# 1. Size of the Largest Connected Component
largest_component_size <- max(components$csize)
proportion_largest <- largest_component_size / vcount(g)
cat("Largest Component Size:", largest_component_size, "(", round(proportion_largest * 100, 2), "% of zones)\n")


# 2. Network Density
network_density <- edge_density(g, loops = FALSE)
cat("Network Density:", round(network_density * 100, 2), "%\n")

# 3. Average Path Length
if (num_components > 1) {
  # Extract the largest connected component
  largest_component_nodes <- V(g)[components$membership == which.max(components$csize)]
  subgraph_largest <- induced_subgraph(g, largest_component_nodes)
  
  # Average Path Length for the largest component using mean_distance()
  avg_path_length <- mean_distance(subgraph_largest, directed = FALSE)
  cat("Average Path Length (Largest Component):", round(avg_path_length, 2), "\n")
} else {
  # If fully connected, calculate for the entire graph
  avg_path_length <- mean_distance(g, directed = FALSE)
  cat("Average Path Length:", round(avg_path_length, 2), "\n")
}
```
# Demand-Aligned Coverage
```{r}
rnet_city = sf::st_read("network_eval_file/combined_network_tile.geojson") |> st_transform(crs_target)
rnet_city = rnet_city[st_union(city_boundary), , op = st_within]
rnet_city <- rnet_city %>%
  mutate(length_m = st_length(geometry))
rnet_city <- rnet_city %>%
  mutate(weighted_potential = all_fastest_bicycle_go_dutch * as.numeric(length_m))

P_total <- sum(rnet_city$weighted_potential, na.rm = TRUE)
cat("Total Cycling Potential in the City (P_total):", P_total, "\n")
rnet_core_buffer = st_buffer(rnet_core, 20)

rnet_city_buffer = rnet_city[st_union(rnet_core_buffer), , op = st_within]

# Calculate P(U_city): Total cycling potential within the buffered area
P_U_city <- sum(rnet_city_buffer$weighted_potential, na.rm = TRUE)

cat("Cycling Potential within Buffered Area (P(U_city)):", P_U_city, "\n")

# Compute Cycling Potential Coverage
cycling_potential_coverage <- P_U_city / P_total
cat("Cycling Potential Coverage:", round(cycling_potential_coverage * 100, 2), "%\n")
```

# Population Coverage

```{r}
# Ensure validity
zones <- intermediate_zone %>%
  select(InterZone, TotPop2011, StdAreaKm2, geometry) %>%
  st_make_valid()

# Calculate population density (people per km²)
zones <- zones %>%
  mutate(pop_density = TotPop2011 / StdAreaKm2)

# Create a buffer around the core network
dist_threshold <- 500 # for example, or 20m as previously
rnet_core_buffer <- st_buffer(rnet_core, dist_threshold)

# Compute W = intersect buffer with city boundary (ensuring coverage is within city)
W <- st_intersection(st_union(rnet_core_buffer), city_boundary)

# Intersect zones with W to find coverage per zone
zones_coverage <- st_intersection(zones, W)

# Calculate covered area in km²
# st_area returns values in CRS units (often m²), convert to km²
zones_coverage$covered_area <- st_area(zones_coverage)
zones_coverage$covered_area_km2 <- units::set_units(zones_coverage$covered_area, km^2)

# Estimate covered population: pop_density * covered_area_km2
zones_coverage <- zones_coverage %>%
  mutate(covered_population = pop_density * as.numeric(covered_area_km2))

# Sum covered population across all zones
P_covered <- sum(zones_coverage$covered_population, na.rm = TRUE)

# Total population in the city
P_total <- sum(zones$TotPop2011, na.rm = TRUE)

# Compute Population Coverage
population_coverage <- P_covered / P_total
cat("Population Coverage based on actual covered area:", round(population_coverage * 100, 2), "%\n")

```

# OD
```{r}
library(sf)
library(dplyr)

# Assuming od_data and rnet_core are loaded and share the same projected CRS.
# Ensure rnet_core is a single unified linestring or a MULTILINESTRING
rnet_core_union <- st_union(rnet_core) 

# Compute midpoint of each O-D line.
# st_line_sample with sample = 0.5 gives a point at half the line length.
od_midpoints <- st_line_sample(od_data, sample = 0.5)
od_data_mid <- st_as_sf(data.frame(od_data), geometry = od_midpoints)

# Compute distances from each O-D midpoint to the network
od_data_mid <- od_data_mid %>%
  mutate(distance_to_network = as.numeric(st_distance(geometry, rnet_core_union)))

# Compute average O-D distance
avg_distance <- mean(od_data_mid$distance_to_network, na.rm = TRUE)
cat("Average O-D Distance:", round(avg_distance, 2), "meters\n")

# Define a distance threshold
dist_threshold <- 500

# Count how many O-D points are within the threshold
od_count_within <- sum(od_data_mid$distance_to_network <= dist_threshold, na.rm = TRUE)
od_count_total <- nrow(od_data_mid)

od_coverage_count <- od_count_within / od_count_total
cat("O-D Coverage (Count-based) at", dist_threshold, "m:", round(od_coverage_count * 100, 2), "%\n")

# Demand-weighted coverage
# 'all' column indicates total trips on that O-D line
total_trips <- sum(od_data_mid$all, na.rm = TRUE)
trips_within <- sum(od_data_mid$all[od_data_mid$distance_to_network <= dist_threshold], na.rm = TRUE)

od_coverage_demand <- trips_within / total_trips
cat("O-D Coverage (Demand-weighted) at", dist_threshold, "m:", round(od_coverage_demand * 100, 2), "%\n")

# Optional: Create a threshold buffer around the network for visualization
network_buffer <- st_buffer(rnet_core_union, dist_threshold)

# Categorize points by whether they're within the threshold
od_data_mid <- od_data_mid %>%
  mutate(within_threshold = ifelse(distance_to_network <= dist_threshold, "Within Threshold", "Beyond Threshold"))

ggplot() +
  geom_sf(data = network_buffer, fill = "lightblue", color = NA, alpha = 0.4) +
  geom_sf(data = rnet_core_union, color = "darkblue", size = 1) +
  geom_sf(data = od_data_mid, aes(color = within_threshold), alpha = 0.8) +
  scale_color_manual(values = c("Within Threshold" = "green", "Beyond Threshold" = "red")) +
  labs(title = "O-D Accessibility to Cycling Network",
       subtitle = paste("Threshold Distance:", dist_threshold, "m"),
       color = "OD Point Status") +
  theme_minimal()
```
# Directness and Eﬀiciency
```{r}


# 1. Convert network to sfnetwork and assign weights as lengths
network_sfnet <- as_sfnetwork(rnet_core, directed = FALSE)

# Compute edge lengths in meters
network_sfnet <- network_sfnet %>%
  activate("edges") %>%
  mutate(weight = as.numeric(st_length(geometry))) # weight in meters

# Extract igraph object
g <- network_sfnet %>% as.igraph()

# 2. Identify Largest Connected Component (LCC)
comp <- components(g)
largest_comp_id <- which.max(comp$csize)
lcc_nodes <- V(g)[comp$membership == largest_comp_id]
g_lcc <- induced_subgraph(g, lcc_nodes)

# 3. Compute shortest path distances on LCC using weights
# This returns a matrix of shortest-path distances (in meters)
dist_matrix_g <- distances(g_lcc, weights = E(g_lcc)$weight)

# 4. Get node coordinates (for Euclidean distances)
nodes_sf <- network_sfnet %>%
  activate("nodes") %>%
  st_as_sf()
# Extract coordinates (returns a matrix with columns X and Y)
coords <- st_coordinates(nodes_sf)

# Create a data frame with node attributes plus coordinates
node_coords <- nodes_sf %>%
  as.data.frame() %>%
  bind_cols(
    data.frame(x = coords[,1], y = coords[,2])
  )

# Extract LCC node coordinates
node_coords_lcc <- node_coords[as.numeric(lcc_nodes), ]

# Compute Euclidean distances
dist_matrix_e <- as.matrix(dist(node_coords_lcc[, c("x","y")]))

# Ensure no zero distances for i != j
# We'll consider only i < j pairs to avoid double counting and i = j pairs.

valid_pairs <- upper.tri(dist_matrix_g, diag = FALSE) & is.finite(dist_matrix_g) & dist_matrix_g > 0
# dist_matrix_g > 0 ensures no zero distance pairs (excluding self-distances)
# is.finite(dist_matrix_g) excludes infinite distances if any

# 5. Directness (D)
# D = average(d_E(i,j)/d_G(i,j))
directness_ratios <- dist_matrix_e[valid_pairs] / dist_matrix_g[valid_pairs]
D <- mean(directness_ratios, na.rm = TRUE)
cat("Directness (D):", D, "\n")

# 6. Global Efficiency (E_glob)
# E_glob = (sum_{i != j}(1/d_G(i,j))) / (sum_{i != j}(1/d_E(i,j)))
# Use the same valid_pairs for consistency. Global efficiency typically considers the whole graph,
# but let's just consider the LCC to avoid infinite distances from disconnected pairs.

sum_inv_dG <- sum(1/dist_matrix_g[valid_pairs], na.rm = TRUE)
sum_inv_dE <- sum(1/dist_matrix_e[valid_pairs], na.rm = TRUE)
E_glob <- sum_inv_dG / sum_inv_dE
cat("Global Efficiency (E_glob):", E_glob, "\n")

# 7. Local Efficiency (E_loc)
calc_local_eff <- function(node_id, distG, distE, g_graph) {
  neighbors_idx <- as.numeric(neighbors(g_graph, node_id))
  
  if (length(neighbors_idx) < 2) {
    return(NA)
  }
  
  distG_sub <- distG[neighbors_idx, neighbors_idx]
  distE_sub <- distE[neighbors_idx, neighbors_idx]
  
  valid_pairs_local <- upper.tri(distG_sub, diag=FALSE) & is.finite(distG_sub) & distG_sub > 0
  if (sum(valid_pairs_local) == 0) {
    return(NA)
  }
  
  sum_inv_dG_sub <- sum(1/distG_sub[valid_pairs_local], na.rm = TRUE)
  sum_inv_dE_sub <- sum(1/distE_sub[valid_pairs_local], na.rm = TRUE)
  
  E_glob_i <- sum_inv_dG_sub / sum_inv_dE_sub
  return(E_glob_i)
}

E_glob_i_values <- sapply(seq_len(vcount(g_lcc)), function(i) calc_local_eff(i, dist_matrix_g, dist_matrix_e, g_lcc))
E_loc <- mean(E_glob_i_values, na.rm = TRUE)
cat("Local Efficiency (E_loc):", E_loc, "\n")

```

```{r}
library(sf)
library(dplyr)
library(sfnetworks)
library(igraph)
library(units)
library(ggraph)
library(ggplot2)

### Function: Compute Spatial Coverage
compute_spatial_coverage <- function(rnet_core, city_boundary, buffer_distance = 500) {
  # Create a buffer around the network
  network_buffer <- st_buffer(rnet_core, dist = buffer_distance)
  # Union all buffer polygons
  buffer_union <- st_union(network_buffer)
  # Intersect with city boundary
  buffer_intersection <- st_intersection(buffer_union, city_boundary)
  
  # Compute areas
  area_buffered <- st_area(buffer_intersection)
  area_city <- st_area(city_boundary)
  
  # Spatial coverage ratio
  spatial_coverage <- as.numeric(area_buffered / area_city)
  return(list(
    coverage = spatial_coverage,
    buffered_area = buffer_intersection
  ))
}

### Function: Compute Zone Connectivity
compute_zone_connectivity <- function(intermediate_zone, city_boundary, buffer_intersection, density_quantile = 0.3) {
  # Filter zones by density threshold
  intermediate_zone$density = intermediate_zone$ResPop2011 / intermediate_zone$StdAreaKm2
  density_threshold = quantile(intermediate_zone$density, density_quantile, na.rm = TRUE)
  intermediate_zone = intermediate_zone |> filter(density > density_threshold)
  
  zones = intermediate_zone |>
    select(InterZone, geometry) |>
    st_make_valid()
  
  # W = B_union ∩ A_city (already computed outside)
  W = buffer_intersection
  
  # Compute intersections W_i
  zones = zones |>
    rowwise() |>
    mutate(W_i = list(st_intersection(geometry, W))) |>
    ungroup()
  
  # Check intersections
  zones = zones |> mutate(has_intersection = lengths(W_i) > 0)
  
  # Build adjacency based on W_i connectivity
  zone_ids = zones$InterZone
  num_zones = length(zone_ids)
  adj_matrix = matrix(0, nrow = num_zones, ncol = num_zones,
                      dimnames = list(zone_ids, zone_ids))
  
  for (i in 1:num_zones) {
    for (j in i:num_zones) {
      if (i == j) {
        adj_matrix[i, j] = 1
      } else {
        geom_i = zones$W_i[[i]]
        geom_j = zones$W_i[[j]]
        
        intersects = st_intersects(geom_i, geom_j, sparse = FALSE)
        touches = st_touches(geom_i, geom_j, sparse = FALSE)
        
        if (any(intersects) | any(touches)) {
          adj_matrix[i, j] = 1
          adj_matrix[j, i] = 1
        }
      }
    }
  }
  
  all_connected <- all(adj_matrix == 1)
  cat("Are all zones inter-connected within W? ", all_connected, "\n")

  g = graph_from_adjacency_matrix(adj_matrix, mode = "undirected")
  comp = components(g)
  largest_comp_size <- max(comp$csize)
  total_zones <- length(V(g))
  fraction_connected <- largest_comp_size / total_zones
  return(list(
    graph = g,
    all_connected = (comp$no == 1),
    fraction_connected = fraction_connected,
    adj_matrix = adj_matrix
  ))
}

### Function: Compute Cycling Potential Coverage
compute_cycling_potential_coverage <- function(rnet_city, city_boundary, rnet_core, crs_target, buffer_distance = 20) {
  
  # Filter city network to within the city boundary
  rnet_city <- rnet_city[st_union(city_boundary), , op = st_within]
  
  # Compute length of each segment
  rnet_city <- rnet_city %>%
    mutate(length_m = as.numeric(st_length(geometry))) 
  
  # Total city potential (sum of all_fastest_bicycle_go_dutch)
  P_total <- sum(rnet_city$all_fastest_bicycle_go_dutch, na.rm = TRUE)
  
  # Total city length
  L_city <- sum(rnet_city$length_m, na.rm = TRUE)
  
  # City-wide density of potential
  D_city <- P_total / L_city
  
  # Create a buffer around the core network
  rnet_core_buffer <- st_buffer(rnet_core, buffer_distance)
  
  # Extract segments within the buffer
  rnet_city_buffer <- rnet_city[st_union(rnet_core_buffer), , op = st_within]
  
  # Buffered potential sum
  P_U_city <- sum(rnet_city_buffer$all_fastest_bicycle_go_dutch, na.rm = TRUE)
  
  # Buffered length
  L_buffer <- sum(rnet_city_buffer$length_m, na.rm = TRUE)
  
  # Density of potential within the buffered area
  D_buffer <- P_U_city / L_buffer
  
  # Coverage ratio
  coverage_ratio <- D_buffer / D_city
  
  cycling_potential_coverage <- P_U_city / P_total
  cat("Cycling Potential Coverage:", round(cycling_potential_coverage * 100, 2), "%\n")  
  cat("City-wide density of potential (D_city):", D_city, "\n")
  cat("Buffered area density of potential (D_buffer):", D_buffer, "\n")
  cat("Coverage Ratio (D_buffer / D_city):", coverage_ratio, "\n")
  
  return(list(
    coverage = cycling_potential_coverage,
    D_city = D_city,
    D_buffer = D_buffer,
    coverage_ratio = coverage_ratio
  ))
}

### Function: Compute Population Coverage
compute_population_coverage <- function(intermediate_zone, city_boundary, rnet_core, dist_threshold = 500) {
  zones <- intermediate_zone %>%
    select(InterZone, TotPop2011, StdAreaKm2, geometry) %>%
    st_make_valid() %>%
    mutate(pop_density = TotPop2011 / StdAreaKm2)
  
  rnet_core_buffer <- st_buffer(rnet_core, dist_threshold)
  W <- st_intersection(st_union(rnet_core_buffer), city_boundary)
  
  zones_coverage <- st_intersection(zones, W)
  zones_coverage$covered_area <- st_area(zones_coverage)
  zones_coverage$covered_area_km2 <- set_units(zones_coverage$covered_area, km^2)
  
  zones_coverage <- zones_coverage %>%
    mutate(covered_population = pop_density * as.numeric(covered_area_km2))
  
  P_covered <- sum(zones_coverage$covered_population, na.rm = TRUE)
  P_total <- sum(zones$TotPop2011, na.rm = TRUE)
  
  population_coverage <- P_covered / P_total
  return(population_coverage)
}

### Function: Compute O-D Accessibility
compute_od_accessibility <- function(od_data, rnet_core, dist_threshold = 500) {
  rnet_core_union <- st_union(rnet_core)
  od_midpoints <- st_line_sample(od_data, sample = 0.5)
  od_data_mid <- st_as_sf(data.frame(od_data), geometry = od_midpoints)
  
  od_data_mid <- od_data_mid %>%
    mutate(distance_to_network = as.numeric(st_distance(geometry, rnet_core_union)))
  
  avg_distance <- mean(od_data_mid$distance_to_network, na.rm = TRUE)
  
  od_count_within <- sum(od_data_mid$distance_to_network <= dist_threshold, na.rm = TRUE)
  od_count_total <- nrow(od_data_mid)
  od_coverage_count <- od_count_within / od_count_total
  
  total_trips <- sum(od_data_mid$all, na.rm = TRUE)
  trips_within <- sum(od_data_mid$all[od_data_mid$distance_to_network <= dist_threshold], na.rm = TRUE)
  od_coverage_demand <- trips_within / total_trips
  
  return(list(
    avg_distance = avg_distance,
    od_coverage_count = od_coverage_count,
    od_coverage_demand = od_coverage_demand
  ))
}

### Function: Compute Directness and Efficiency
compute_directness_efficiency <- function(rnet_core) {
  network_sfnet <- as_sfnetwork(rnet_core, directed = FALSE)
  network_sfnet <- network_sfnet %>%
    activate("edges") %>%
    mutate(weight = as.numeric(st_length(geometry))) 
  
  g <- network_sfnet %>% as.igraph()
  
  comp <- components(g)
  largest_comp_id <- which.max(comp$csize)
  lcc_nodes <- V(g)[comp$membership == largest_comp_id]
  g_lcc <- induced_subgraph(g, lcc_nodes)
  
  dist_matrix_g <- distances(g_lcc, weights = E(g_lcc)$weight)
  
  nodes_sf <- network_sfnet %>%
    activate("nodes") %>%
    st_as_sf()
  
  coords <- st_coordinates(nodes_sf)
  
  node_coords <- nodes_sf %>%
    as.data.frame() %>%
    bind_cols(data.frame(x = coords[,1], y = coords[,2]))
  
  node_coords_lcc <- node_coords[as.numeric(lcc_nodes), ]
  
  dist_matrix_e <- as.matrix(dist(node_coords_lcc[, c("x","y")]))
  
  valid_pairs <- upper.tri(dist_matrix_g, diag = FALSE) & is.finite(dist_matrix_g) & dist_matrix_g > 0
  
  # Directness
  directness_ratios <- dist_matrix_e[valid_pairs] / dist_matrix_g[valid_pairs]
  D <- mean(directness_ratios, na.rm = TRUE)
  
  # Global Efficiency
  sum_inv_dG <- sum(1/dist_matrix_g[valid_pairs], na.rm = TRUE)
  sum_inv_dE <- sum(1/dist_matrix_e[valid_pairs], na.rm = TRUE)
  E_glob <- sum_inv_dG / sum_inv_dE
  
  # Local Efficiency
  calc_local_eff <- function(node_id, distG, distE, g_graph) {
    neighbors_idx <- as.numeric(neighbors(g_graph, node_id))
    if (length(neighbors_idx) < 2) {
      return(NA)
    }
    distG_sub <- distG[neighbors_idx, neighbors_idx]
    distE_sub <- distE[neighbors_idx, neighbors_idx]
    valid_pairs_local <- upper.tri(distG_sub, diag=FALSE) & is.finite(distG_sub) & distG_sub > 0
    if (sum(valid_pairs_local) == 0) {
      return(NA)
    }
    sum_inv_dG_sub <- sum(1/distG_sub[valid_pairs_local], na.rm = TRUE)
    sum_inv_dE_sub <- sum(1/distE_sub[valid_pairs_local], na.rm = TRUE)
    E_glob_i <- sum_inv_dG_sub / sum_inv_dE_sub
    return(E_glob_i)
  }
  
  E_glob_i_values <- sapply(seq_len(vcount(g_lcc)), function(i) calc_local_eff(i, dist_matrix_g, dist_matrix_e, g_lcc))
  E_loc <- mean(E_glob_i_values, na.rm = TRUE)
  
  return(list(
    D = D,
    E_glob = E_glob,
    E_loc = E_loc
  ))
}


rnet_core = sf::st_read("network_eval_file/city_of_edinburgh_2024-12-01_3_coherent_network.geojson")
intermediate_zone = sf::st_read("network_eval_file/SG_IntermediateZone_Bdry_2011.gpkg")
rnet_city = sf::st_read("network_eval_file/combined_network_tile.geojson") |> st_transform(27700)
# 1. Compute Spatial Coverage
sp_cov_result <- compute_spatial_coverage(rnet_core, city_boundary)
cat("Spatial Coverage:", round(sp_cov_result$coverage * 100, 2), "%\n")

# 2. Zone Connectivity
zone_conn_result <- compute_zone_connectivity(intermediate_zone, city_boundary, sp_cov_result$buffered_area)
cat("Fraction of zones in largest component:", round(zone_conn_result$fraction_connected * 100, 2), "%\n")

# 3. Cycling Potential Coverage
cp_cov_result <- compute_cycling_potential_coverage(rnet_city, city_boundary, rnet_core, crs_target)
cat("Cycling Potential Coverage:", round(cp_cov_result$coverage * 100, 2), "%\n")
cat("City-wide density ratio:", round(cp_cov_result$coverage_ratio), "\n")
# 4. Population Coverage
pop_cov <- compute_population_coverage(intermediate_zone, city_boundary, rnet_core, dist_threshold = 500)
cat("Population Coverage:", round(pop_cov * 100, 2), "%\n")

# 5. O-D Accessibility
od_result <- compute_od_accessibility(od_data, rnet_core, dist_threshold = 500)
cat("Average O-D Distance:", round(od_result$avg_distance, 2), "meters\n")
cat("O-D Coverage (Count-based):", round(od_result$od_coverage_count * 100, 2), "%\n")
cat("O-D Coverage (Demand-weighted):", round(od_result$od_coverage_demand * 100, 2), "%\n")

# 6. Directness and Efficiency
de_result <- compute_directness_efficiency(rnet_core)
cat("Directness (D):", de_result$D, "\n")
cat("Global Efficiency (E_glob):", de_result$E_glob, "\n")
cat("Local Efficiency (E_loc):", de_result$E_loc, "\n")

```

```{r}
library(fmsb)
# 1. Spatial Coverage
sp_cov_result <- compute_spatial_coverage(rnet_core, city_boundary)
spatial_coverage <- sp_cov_result$coverage * 100  # Convert to percentage

# 2. Zone Connectivity
zone_conn_result <- compute_zone_connectivity(intermediate_zone, city_boundary, sp_cov_result$buffered_area)
zone_connectivity <- zone_conn_result$fraction_connected * 100

# 3. Cycling Potential Coverage
cp_cov_result <- compute_cycling_potential_coverage(rnet_city, city_boundary, rnet_core, crs_target)
cycling_potential_coverage <- cp_cov_result$coverage * 100
citywide_density_ratio      <- cp_cov_result$coverage_ratio  # Might need different scaling if > 1

# 4. Population Coverage
pop_cov <- compute_population_coverage(intermediate_zone, city_boundary, rnet_core, dist_threshold = 500)
population_coverage <- pop_cov * 100

# 5. O-D Accessibility
od_result <- compute_od_accessibility(od_data, rnet_core, dist_threshold = 500)
od_coverage_count  <- od_result$od_coverage_count * 100
od_coverage_demand <- od_result$od_coverage_demand * 100
avg_od_distance    <- od_result$avg_distance  # If you want to display or scale differently

# 6. Directness and Efficiency
de_result <- compute_directness_efficiency(rnet_core)
directness         <- de_result$D
global_efficiency  <- de_result$E_glob
local_efficiency   <- de_result$E_loc

# 1) Create the base data frame of metrics
df_metrics_scaled <- data.frame(
  SpatialCoverage          = df_metrics_numeric$SpatialCoverage / 100,
  ZoneConnectivity         = df_metrics_numeric$ZoneConnectivity / 100,
  CyclingPotentialCoverage = df_metrics_numeric$CyclingPotentialCoverage / 100,
  CitywideDensityRatio     = df_metrics_numeric$CitywideDensityRatio / 5,
  PopulationCoverage       = df_metrics_numeric$PopulationCoverage / 100,
  ODCoverageCountBased     = df_metrics_numeric$ODCoverageCountBased / 100,
  ODCoverageDemandWeighted = df_metrics_numeric$ODCoverageDemandWeighted / 100,
  Directness               = df_metrics_numeric$Directness,         # Already 0–1
  GlobalEfficiency         = df_metrics_numeric$GlobalEfficiency,   # Already 0–1
  LocalEfficiency          = df_metrics_numeric$LocalEfficiency     # Already 0–1
)

# 3) Create top/bottom rows for fmsb
max_vals <- rep(1, ncol(df_metrics_scaled))
min_vals <- rep(0, ncol(df_metrics_scaled))

df_radar <- rbind(
  max_vals,
  min_vals,
  df_metrics_scaled
)

# 5) Rename columns for display on the radar
colnames(df_radar) <- c(
  "Spatial\nCoverage",
  "Zone\nConnectivity",
  "Cycling\nPotential",
  "Density\nRatio",
  "Pop.\nCoverage",
  "OD\nCoverage\n(Count)",
  "OD\nCoverage\n(Demand)",
  "Directness",
  "Global\nEfficiency",
  "Local\nEfficiency"
)

# 6) Plot the radar chart
radarchart(
  df_radar,
  axistype = 1,
  seg = 5,
  pcol  = rgb(0.2, 0.5, 0.5, 0.9),   # line color
  pfcol = rgb(0.2, 0.5, 0.5, 0.5),   # fill color (with some transparency)
  plwd  = 2,                         # line width
  cglcol = "grey",                   # grid line color
  cglty = 1,                         # grid line type
  axislabcol = "grey",              # axis label color
  caxislabels = seq(0, max(max_vals), length.out = 6),  # radial axis labels
  title = "City Cycling Infrastructure - Radar Chart"
)


```

```{r}
# Compile metrics into a data frame
connectivity_metrics <- data.frame(
  Metric = c(
    "Number of Connected Components",
    "Largest Component Size",
    "Proportion of Largest Component",
    "Network Density (%)",
    "Average Path Length",
    "Global Efficiency",
    "Average Local Efficiency",
    "Clustering Coefficient"
  ),
  Value = c(
    num_components,
    largest_component_size,
    round(proportion_largest * 100, 2),
    round(network_density * 100, 2),
    round(avg_path_length, 2),
    round(global_efficiency, 4),
    round(average_local_efficiency, 4),
    round(clustering_coeff, 4)
  )
)

# Display the metrics
print(connectivity_metrics)

# Load ggplot2 if not already loaded
library(ggplot2)

# Plot metrics as a bar chart
ggplot(connectivity_metrics, aes(x = Metric, y = Value)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  ggtitle("Connectivity Metrics of Cycling Network") +
  ylab("Value") +
  xlab("Metric")

```

