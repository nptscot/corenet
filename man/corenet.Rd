% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/corenet.R
\name{corenet}
\alias{corenet}
\title{Generating cohesive cycling network}
\usage{
corenet(
  influence_network,
  cohesive_base_network,
  target_zone,
  key_attribute = "all_fastest_bicycle_go_dutch",
  crs = "EPSG:27700",
  npt_threshold = 1500,
  maxDistPts = 1500,
  minDistPts = 2,
  road_scores = list(`A Road` = 1, `B Road` = 1, `Minor Road` = 1000),
  n_removeDangles = 6,
  penalty_value = 1,
  group_column = "name_1",
  max_path_weight = 10
)
}
\arguments{
\item{influence_network}{The NPT network data, class 'sf'.}

\item{cohesive_base_network}{Spatial object representing the cohesive base network obtained via function cohesive_network_prep, class 'sf'.}

\item{target_zone}{Spatial object representing the study area or target zone, class 'sf'.}

\item{key_attribute}{Attribute used to determine significant network routes, default is "all_fastest_bicycle_go_dutch".}

\item{crs}{Coordinate reference system for transformation, default is "EPSG:27700".}

\item{npt_threshold}{Threshold value for filtering the NPT network, default is 1500.}

\item{maxDistPts}{Distance threshold used in path calculations, default is 1500 meters.}

\item{minDistPts}{Minimum distance threshold used in path calculations, default is 2 meters.}

\item{road_scores}{A list of road types and their corresponding scoring weights.}

\item{n_removeDangles}{Number of iterations to remove dangles from the network, default is 6.}

\item{penalty_value}{The penalty value for roads with low values, default is 1.}

\item{group_column}{The column name to group the network by edge betweenness, default is "name_1".}

\item{max_path_weight}{Maximum weight allowed for paths in network calculations, default is 10.}
}
\value{
A spatial object representing the largest cohesive component of the network, free of dangles.
}
\description{
Generating cohesive cycling network
}
\examples{
library(sf)
library(dplyr)
library(dbscan)
library(zonebuilder)

# Load demo data 
os_edinburgh_demo_3km = sf::st_set_crs(os_edinburgh_demo_3km, 27700)
NPT_demo_3km = sf::st_set_crs(NPT_demo_3km, 27700)
base_network = sf::st_transform(os_edinburgh_demo_3km, crs = 27700)
influence_network = sf::st_transform(NPT_demo_3km, crs = 27700)
target_zone = zonebuilder::zb_zone("Edinburgh", n_circles = 2) |>
               sf::st_transform(crs = "EPSG:27700")

# Execute the function
OS_NPT_demo = cohesive_network_prep( base_network = base_network, 
                                influence_network = influence_network, 
                                target_zone = target_zone, 
                                key_attribute = "road_function", 
                                crs = "EPSG:27700", 
                                attribute_values = c("A Road", "B Road", "Minor Road"))
OS_NPT_demo$geometry = OS_NPT_demo$geom
coherent_network = corenet(influence_network = OS_NPT_demo, 
                  cohesive_base_network = OS_NPT_demo, 
                  target_zone = target_zone, 
                  key_attribute = "all_fastest_bicycle_go_dutch", 
                  crs = "EPSG:27700",npt_threshold = 1500,maxDistPts = 1500,minDistPts = 2,
                  road_scores = list("A Road" = 1, "B Road" = 1, "Minor Road" = 1000),n_removeDangles = 6,penalty_value = 1)

}
