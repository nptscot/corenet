% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/corenet.R
\name{prepare_network}
\alias{prepare_network}
\title{Prepare a network data structure by transforming, scoring, and weighting based on road types and conditions}
\usage{
prepare_network(
  network,
  key_attribute = "all_fastest_bicycle_go_dutch",
  road_scores = list(`A Road` = 1, `B Road` = 2, `Minor Road` = 1e+05, penalty_value = 1),
  transform_crs = 27700
)
}
\arguments{
\item{network}{An 'sf' object representing a spatial network.}

\item{key_attribute}{The attribute name from the network used for normalization and scoring, default is "all_fastest_bicycle_go_dutch".}

\item{road_scores}{A list specifying scores for different road types. Example: list("A Road" = 1, "B Road" = 1, "Minor Road" = 10000000).}

\item{transform_crs}{The numeric CRS code for coordinate transformation, default is 27700.}

\item{penalty_value}{The penalty value for roads with low values, default is 1.}
}
\value{
An 'sfnetwork' object with attributes 'arterialness' and 'weight' that account for road conditions and their relative importance.
}
\description{
This function transforms a spatial network object into an 'sfnetwork', scoring it based on road conditions and classifications.
The transformation process includes casting the network to LINESTRING, converting it to 'sfnetwork', and adding attributes
like 'arterialness' and 'weight' which are calculated based on the given road scores and the importance of the roads in the network.
}
\examples{
library(sf)
library(sfnetworks)
library(dplyr)
library(purrr)
library(zonebuilder)

# Load demo data 
os_edinburgh_demo_3km = sf::st_set_crs(os_edinburgh_demo_3km, 27700)
NPT_demo_3km = sf::st_set_crs(NPT_demo_3km, 27700)
base_network = sf::st_transform(os_edinburgh_demo_3km, crs = 27700)
influence_network = sf::st_transform(NPT_demo_3km, crs = 27700)
target_zone = zonebuilder::zb_zone("Edinburgh", n_circles = 2) |>
               sf::st_transform(crs = "EPSG:27700")

# Prepare the cohesive network
network = cohesive_network_prep(base_network = base_network, 
                                influence_network = influence_network, 
                                target_zone = target_zone, 
                                key_attribute = "road_function", 
                                attribute_values = c("A Road", "B Road", "Minor Road"))

# Define road scores
road_scores = list("A Road" = 1, "B Road" = 1, "Minor Road" = 100000)

# Prepare the network
prepared_network = prepare_network(network, 
                                    key_attribute = "all_fastest_bicycle_go_dutch",
                                    road_scores = road_scores,
                                    transform_crs = 27700)

# Print the prepared network
print(prepared_network)
}
