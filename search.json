[{"path":"https://nptscot.github.io/corenet/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Zhao Wang Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nptscot.github.io/corenet/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zhao Wang. Author, maintainer. Robin Lovelace. Author, contributor.","code":""},{"path":"https://nptscot.github.io/corenet/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang Z, Lovelace R (2024). corenet: Generate Core Transport Networks. R package version 0.0.1, https://nptscot.github.io/corenet/.","code":"@Manual{,   title = {corenet: Generate Core Transport Networks},   author = {Zhao Wang and Robin Lovelace},   year = {2024},   note = {R package version 0.0.1},   url = {https://nptscot.github.io/corenet/}, }"},{"path":"https://nptscot.github.io/corenet/index.html","id":"corenet","dir":"","previous_headings":"","what":"Generate Core Transport Networks","title":"Generate Core Transport Networks","text":"goal corenet provide set functions generate ‘core’ route networks transport planning. Install :","code":"if (!require(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(\"nptscot/corenet\")"},{"path":"https://nptscot.github.io/corenet/reference/NPT_demo_3km.html","id":null,"dir":"Reference","previous_headings":"","what":"Edinburgh NPT Network - 3km Demo Data — NPT_demo_3km","title":"Edinburgh NPT Network - 3km Demo Data — NPT_demo_3km","text":"data set contains network data Edinburgh within 3km radius, sourced NPT. highlights specific network characteristics important transportation planning.","code":""},{"path":"https://nptscot.github.io/corenet/reference/NPT_demo_3km.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edinburgh NPT Network - 3km Demo Data — NPT_demo_3km","text":"","code":"NPT_demo_3km"},{"path":"https://nptscot.github.io/corenet/reference/NPT_demo_3km.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Edinburgh NPT Network - 3km Demo Data — NPT_demo_3km","text":"object class sf (inherits data.frame).","code":""},{"path":"https://nptscot.github.io/corenet/reference/NPT_demo_3km.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edinburgh NPT Network - 3km Demo Data — NPT_demo_3km","text":"","code":"data(NPT_demo_3km) head(NPT_demo_3km) #>      all_fastest_bicycle_go_dutch #> 2892                            0 #> 2893                            0 #> 2900                            0 #> 2901                            0 #> 2902                            0 #> 2903                            0 #>                                                                                                                                        geometry #> 2892                                                                                                     323427.7, 323428.7, 672354.9, 672373.8 #> 2893 323427.7, 323447.7, 323450.2, 323452.1, 323453.4, 323455.2, 323456.5, 672354.9, 672353.4, 672353.4, 672354.5, 672354.4, 672355.5, 672356.6 #> 2900                                                                                                     323484.9, 323486.9, 672337.2, 672346.0 #> 2901                                                                                                     323494.3, 323495.0, 672445.0, 672448.3 #> 2902                                                                                                     323515.8, 323531.0, 672283.2, 672295.2 #> 2903                                                                                                     323515.8, 323537.4, 672283.2, 672299.5"},{"path":"https://nptscot.github.io/corenet/reference/NPT_demo_6km.html","id":null,"dir":"Reference","previous_headings":"","what":"Edinburgh NPT Network - 6km Demo Data — NPT_demo_6km","title":"Edinburgh NPT Network - 6km Demo Data — NPT_demo_6km","text":"data set contains network data Edinburgh within 6km radius, sourced NPT. Useful analyses require detailed network data planning metrics.","code":""},{"path":"https://nptscot.github.io/corenet/reference/NPT_demo_6km.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edinburgh NPT Network - 6km Demo Data — NPT_demo_6km","text":"","code":"NPT_demo_6km"},{"path":"https://nptscot.github.io/corenet/reference/NPT_demo_6km.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Edinburgh NPT Network - 6km Demo Data — NPT_demo_6km","text":"object class sf (inherits data.frame).","code":""},{"path":"https://nptscot.github.io/corenet/reference/NPT_demo_6km.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edinburgh NPT Network - 6km Demo Data — NPT_demo_6km","text":"","code":"data(NPT_demo_6km) head(NPT_demo_6km) #>      all_fastest_bicycle_go_dutch                               geometry #> 2680                            0 320222.0, 320223.8, 672239.4, 672234.9 #> 2682                            0 320239.6, 320256.7, 672110.0, 672091.8 #> 2684                            0 320256.7, 320280.6, 672091.8, 672065.8 #> 2695                            0 320352.2, 320389.9, 671981.0, 671926.8 #> 2697                            0 320392.8, 320396.6, 672049.2, 672051.4 #> 2713                            0 320651.4, 320664.6, 671841.8, 671846.0"},{"path":"https://nptscot.github.io/corenet/reference/calculate_largest_component.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the largest connected component of a network — calculate_largest_component","title":"Calculate the largest connected component of a network — calculate_largest_component","text":"function takes spatial network represented sf object, converts graph format, identifies connected components, extracts largest one.","code":""},{"path":"https://nptscot.github.io/corenet/reference/calculate_largest_component.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the largest connected component of a network — calculate_largest_component","text":"","code":"calculate_largest_component(network)"},{"path":"https://nptscot.github.io/corenet/reference/calculate_largest_component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the largest connected component of a network — calculate_largest_component","text":"network sf object representing network analyzed.","code":""},{"path":"https://nptscot.github.io/corenet/reference/calculate_largest_component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the largest connected component of a network — calculate_largest_component","text":"sfnetwork object representing largest connected component network.","code":""},{"path":"https://nptscot.github.io/corenet/reference/calculate_paths_from_point_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate paths from a given point to centroids within a specified distance range — calculate_paths_from_point_dist","title":"Calculate paths from a given point to centroids within a specified distance range — calculate_paths_from_point_dist","text":"function determines network paths specific point multiple centroids based distance thresholds, optionally returning shortest paths.","code":""},{"path":"https://nptscot.github.io/corenet/reference/calculate_paths_from_point_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate paths from a given point to centroids within a specified distance range — calculate_paths_from_point_dist","text":"","code":"calculate_paths_from_point_dist(   network,   point,   dist = 500,   centroids,   shortest = FALSE )"},{"path":"https://nptscot.github.io/corenet/reference/calculate_paths_from_point_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate paths from a given point to centroids within a specified distance range — calculate_paths_from_point_dist","text":"network sfnetwork object representing network. point sf point object paths calculated. dist maximum distance (meters) consider path calculations. centroids sf object containing centroids paths calculated. shortest Logical indicating whether shortest paths calculated (TRUE) weighted paths (FALSE).","code":""},{"path":"https://nptscot.github.io/corenet/reference/calculate_paths_from_point_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate paths from a given point to centroids within a specified distance range — calculate_paths_from_point_dist","text":"sf object containing paths meet criteria NULL paths meet criteria.","code":""},{"path":"https://nptscot.github.io/corenet/reference/coherent_network_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped network by edge betweenness from a preprocessed coherent network — coherent_network_group","title":"Generate a grouped network by edge betweenness from a preprocessed coherent network — coherent_network_group","text":"function takes preprocessed network applies graph-based analysis group network edges based betweenness centrality. function assumes input network attributes relevant cycling traffic dynamics, specifically 'all_fastest_bicycle_go_dutch' 'weight'. outputs transformed network edges grouped ranked according mean potential, facilitating analysis visualization critical network pathways.","code":""},{"path":"https://nptscot.github.io/corenet/reference/coherent_network_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped network by edge betweenness from a preprocessed coherent network — coherent_network_group","text":"","code":"coherent_network_group(   coherent_network,   key_attribute = \"all_fastest_bicycle_go_dutch\" )"},{"path":"https://nptscot.github.io/corenet/reference/coherent_network_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped network by edge betweenness from a preprocessed coherent network — coherent_network_group","text":"coherent_network preprocessed 'sf' object containing network data, expected columns 'all_fastest_bicycle_go_dutch' 'weight'. key_attribute attribute used keep.","code":""},{"path":"https://nptscot.github.io/corenet/reference/coherent_network_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a grouped network by edge betweenness from a preprocessed coherent network — coherent_network_group","text":"'sf' object edges grouped ranked based mean potential.Assuming 'coherent_network' obtained previous function corenetGenerate grouped network grouped_network = coherent_network_group(coherent_network)","code":""},{"path":"https://nptscot.github.io/corenet/reference/cohesive_network_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a cohesive cycling network using NPT data — cohesive_network_prep","title":"Prepare a cohesive cycling network using NPT data — cohesive_network_prep","text":"function prepares base network generating cohesive cycling network using NPT data. integrates two different road network data sources within specified target zone produce cohesive cycling network considers specific road attributes.","code":""},{"path":"https://nptscot.github.io/corenet/reference/cohesive_network_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a cohesive cycling network using NPT data — cohesive_network_prep","text":"","code":"cohesive_network_prep(   base_network,   influence_network,   target_zone,   crs = \"EPSG:27700\",   key_attribute = \"road_function\",   attribute_values = c(\"A Road\", \"B Road\", \"Minor Road\") )"},{"path":"https://nptscot.github.io/corenet/reference/cohesive_network_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a cohesive cycling network using NPT data — cohesive_network_prep","text":"base_network Base road network object Open Road, class 'sf'. influence_network NPT road network object, contains influence factors like all_fastest_bicycle_go_dutch, class 'sf'. target_zone Target zone, polygon study area, 3km radius around Edinburgh city centre, class 'sf'. crs Coordinate reference system use, default \"EPSG:27700\". key_attribute attribute network data filter influence outcome. attribute_values Values key_attribute retain network.","code":""},{"path":"https://nptscot.github.io/corenet/reference/cohesive_network_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a cohesive cycling network using NPT data — cohesive_network_prep","text":"list containing two elements: cohesive network zone data, class 'sf'.","code":""},{"path":"https://nptscot.github.io/corenet/reference/cohesive_network_prep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a cohesive cycling network using NPT data — cohesive_network_prep","text":"","code":"library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE library(zonebuilder) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(tmaptools)  # Load demo data  os_edinburgh_demo_3km = sf::st_set_crs(os_edinburgh_demo_3km, 27700) NPT_demo_3km = sf::st_set_crs(NPT_demo_3km, 27700) base_network = sf::st_transform(os_edinburgh_demo_3km, crs = 27700) influence_network = sf::st_transform(NPT_demo_3km, crs = 27700) target_zone = zonebuilder::zb_zone(\"Edinburgh\", n_circles = 2) |>                sf::st_transform(crs = \"EPSG:27700\")  # Prepare the cohesive network OS_NPT_demo = cohesive_network_prep( base_network = base_network,                                  influence_network = influence_network,                                  target_zone = target_zone,                                  key_attribute = \"road_function\",                                  crs = \"EPSG:27700\",                                  attribute_values = c(\"A Road\", \"B Road\", \"Minor Road\")) #> Requested number of segments (45185) does not match the number of segments returned by rsgeo (44530). #> Warning: st_centroid assumes attributes are constant over geometries #> Joining with `by = join_by(road_function)` #> [1] \"Finished preparing the network data\""},{"path":"https://nptscot.github.io/corenet/reference/corenet.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating cohesive cycling network — corenet","title":"Generating cohesive cycling network — corenet","text":"function processes provided network data identify analyze significant routes based percentile threshold. performs spatial operations, clusters data points, calculates largest network component without dangles, aiming develop cohesive cycling network infrastructure.","code":""},{"path":"https://nptscot.github.io/corenet/reference/corenet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating cohesive cycling network — corenet","text":"","code":"corenet(   influence_network,   cohesive_base_network,   target_zone,   key_attribute = \"all_fastest_bicycle_go_dutch\",   crs = \"EPSG:27700\",   dist = 10,   threshold = 1500,   road_scores = list(`A Road` = 1, `B Road` = 1, `Minor Road` = 1e+07) )"},{"path":"https://nptscot.github.io/corenet/reference/corenet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating cohesive cycling network — corenet","text":"influence_network NPT network data, class 'sf'. cohesive_base_network Spatial object representing cohesive base network obtained via function cohesive_network_prep, class 'sf'. target_zone Spatial object representing study area target zone, class 'sf'. key_attribute Attribute used determine significant network routes, default \"all_fastest_bicycle_go_dutch\". crs Coordinate reference system transformation, default \"EPSG:27700\". dist Distance threshold used path calculations, default 10 meters. threshold Value threshold filtering significant routes, default 1500. road_scores list road types corresponding scoring weights.","code":""},{"path":"https://nptscot.github.io/corenet/reference/corenet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating cohesive cycling network — corenet","text":"spatial object representing largest cohesive component network, free dangles.","code":""},{"path":"https://nptscot.github.io/corenet/reference/corenet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating cohesive cycling network — corenet","text":"","code":"library(sf) library(dplyr) library(dbscan) #>  #> Attaching package: ‘dbscan’ #> The following object is masked from ‘package:stats’: #>  #>     as.dendrogram library(zonebuilder)  # Load demo data  os_edinburgh_demo_3km = sf::st_set_crs(os_edinburgh_demo_3km, 27700) NPT_demo_3km = sf::st_set_crs(NPT_demo_3km, 27700) base_network = sf::st_transform(os_edinburgh_demo_3km, crs = 27700) influence_network = sf::st_transform(NPT_demo_3km, crs = 27700) target_zone = zonebuilder::zb_zone(\"Edinburgh\", n_circles = 2) |>                sf::st_transform(crs = \"EPSG:27700\")  # Execute the function OS_NPT_demo = cohesive_network_prep( base_network = base_network,                                  influence_network = influence_network,                                  target_zone = target_zone,                                  key_attribute = \"road_function\",                                  crs = \"EPSG:27700\",                                  attribute_values = c(\"A Road\", \"B Road\", \"Minor Road\")) #> Requested number of segments (45185) does not match the number of segments returned by rsgeo (44530). #> Warning: st_centroid assumes attributes are constant over geometries #> Joining with `by = join_by(road_function)` #> [1] \"Finished preparing the network data\" OS_NPT_demo$geometry = OS_NPT_demo$geom coherent_network = corenet(influence_network = OS_NPT_demo,                    cohesive_base_network = OS_NPT_demo,                    target_zone = target_zone,                    key_attribute = \"all_fastest_bicycle_go_dutch\",                    crs = \"EPSG:27700\", dist = 10, threshold = 1500,                   road_scores = list(\"A Road\" = 1, \"B Road\" = 1, \"Minor Road\" = 10000000)) #> Requested number of segments (5620) does not match the number of segments returned by rsgeo (5505). #> Warning: st_centroid assumes attributes are constant over geometries #> Warning: Overwriting column(s): from #> Warning: Overwriting column(s): to #> Checking if spatial network structure is valid... #> Spatial network structure is valid"},{"path":"https://nptscot.github.io/corenet/reference/create_coherent_network_PMtiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Create coherent network PMtiles — create_coherent_network_PMtiles","title":"Create coherent network PMtiles — create_coherent_network_PMtiles","text":"function generates PMtiles coherent network GeoJSON file using Tippecanoe tool.","code":""},{"path":"https://nptscot.github.io/corenet/reference/create_coherent_network_PMtiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create coherent network PMtiles — create_coherent_network_PMtiles","text":"","code":"create_coherent_network_PMtiles(folder_path, city_filename, cohesive_network)"},{"path":"https://nptscot.github.io/corenet/reference/create_coherent_network_PMtiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create coherent network PMtiles — create_coherent_network_PMtiles","text":"folder_path directory path files saved. city_filename base name output files, case using city name. cohesive_network sf object representing cohesive network.","code":""},{"path":"https://nptscot.github.io/corenet/reference/create_coherent_network_PMtiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create coherent network PMtiles — create_coherent_network_PMtiles","text":"output Tippecanoe command character vector.","code":""},{"path":"https://nptscot.github.io/corenet/reference/os_edinburgh_demo_3km.html","id":null,"dir":"Reference","previous_headings":"","what":"Edinburgh OpenRoads Network - 3km Demo Data — os_edinburgh_demo_3km","title":"Edinburgh OpenRoads Network - 3km Demo Data — os_edinburgh_demo_3km","text":"data set contains network data Edinburgh within 3km radius, sourced OpenRoads. formatted spatial data frame (sf object), suitable spatial analysis demonstrations.","code":""},{"path":"https://nptscot.github.io/corenet/reference/os_edinburgh_demo_3km.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edinburgh OpenRoads Network - 3km Demo Data — os_edinburgh_demo_3km","text":"","code":"os_edinburgh_demo_3km"},{"path":"https://nptscot.github.io/corenet/reference/os_edinburgh_demo_3km.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Edinburgh OpenRoads Network - 3km Demo Data — os_edinburgh_demo_3km","text":"object class sf (inherits data.frame).","code":""},{"path":"https://nptscot.github.io/corenet/reference/os_edinburgh_demo_3km.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edinburgh OpenRoads Network - 3km Demo Data — os_edinburgh_demo_3km","text":"","code":"data(os_edinburgh_demo_3km) head(os_edinburgh_demo_3km) #> Simple feature collection with 6 features and 1 field #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 323197 ymin: 672963.1 xmax: 325917 ymax: 676026 #> CRS:           NA #> # A tibble: 6 × 2 #>   road_function                                                             geom #>   <chr>                                                             <LINESTRING> #> 1 Local Road                       (324017 676022, 324034 676024, 324051 676026) #> 2 Restricted Local Access Road (325559 675412, 325547.5 675402.5, 325536 675393) #> 3 Local Road                     (323197 672989, 323207 672993.5, 323217 672998) #> 4 Local Road                   (325917 673020, 325914.5 673017.5, 325912 673015) #> 5 A Road                                  (324910.8 672963.1, 324910.7 672963.3) #> 6 Local Road                   (323571.4 673096.8, 323582.2 673097.3, 323593 67…"},{"path":"https://nptscot.github.io/corenet/reference/os_edinburgh_demo_6km.html","id":null,"dir":"Reference","previous_headings":"","what":"Edinburgh OpenRoads Network - 6km Demo Data — os_edinburgh_demo_6km","title":"Edinburgh OpenRoads Network - 6km Demo Data — os_edinburgh_demo_6km","text":"data set contains network data Edinburgh within 6km radius, sourced OpenRoads. formatted spatial data frame (sf object), commonly used spatial data analysis.","code":""},{"path":"https://nptscot.github.io/corenet/reference/os_edinburgh_demo_6km.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edinburgh OpenRoads Network - 6km Demo Data — os_edinburgh_demo_6km","text":"","code":"os_edinburgh_demo_6km"},{"path":"https://nptscot.github.io/corenet/reference/os_edinburgh_demo_6km.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Edinburgh OpenRoads Network - 6km Demo Data — os_edinburgh_demo_6km","text":"object class sf (inherits data.frame).","code":""},{"path":"https://nptscot.github.io/corenet/reference/os_edinburgh_demo_6km.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edinburgh OpenRoads Network - 6km Demo Data — os_edinburgh_demo_6km","text":"","code":"data(os_edinburgh_demo_6km) head(os_edinburgh_demo_6km) #> Simple feature collection with 6 features and 1 field #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 321165.6 ymin: 668416 xmax: 329764.5 ymax: 676718.5 #> CRS:           NA #> # A tibble: 6 × 2 #>   road_function                                                             geom #>   <chr>                                                             <LINESTRING> #> 1 Restricted Local Access Road (321210.7 676718.5, 321193.8 676711.7, 321188.8 … #> 2 Local Road                       (324017 676022, 324034 676024, 324051 676026) #> 3 Local Road                   (329693 674189, 329672.5 674183, 329652 674177, … #> 4 Local Road                   (324258 668416, 324255.5 668455.5, 324253 668495) #> 5 Restricted Local Access Road (325559 675412, 325547.5 675402.5, 325536 675393) #> 6 Local Road                   (329750.7 670697.9, 329757.6 670703.4, 329764.5 …"},{"path":"https://nptscot.github.io/corenet/reference/prepare_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a network data structure by transforming, scoring, and weighting based on road types and conditions — prepare_network","title":"Prepare a network data structure by transforming, scoring, and weighting based on road types and conditions — prepare_network","text":"function transforms spatial network object 'sfnetwork', scoring based road conditions classifications. transformation process includes casting network LINESTRING, converting 'sfnetwork', adding attributes like 'arterialness' 'weight' calculated based given road scores importance roads network.","code":""},{"path":"https://nptscot.github.io/corenet/reference/prepare_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a network data structure by transforming, scoring, and weighting based on road types and conditions — prepare_network","text":"","code":"prepare_network(   network,   key_attribute = \"all_fastest_bicycle_go_dutch\",   road_scores = list(`A Road` = 1, `B Road` = 1, `Minor Road` = 1e+07),   transform_crs = 27700 )"},{"path":"https://nptscot.github.io/corenet/reference/prepare_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a network data structure by transforming, scoring, and weighting based on road types and conditions — prepare_network","text":"network 'sf' object representing spatial network. key_attribute attribute name network used normalization scoring, default \"all_fastest_bicycle_go_dutch\". road_scores list specifying scores different road types. Example: list(\"Road\" = 1, \"B Road\" = 1, \"Minor Road\" = 10000000). transform_crs numeric CRS code coordinate transformation, default 27700.","code":""},{"path":"https://nptscot.github.io/corenet/reference/prepare_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a network data structure by transforming, scoring, and weighting based on road types and conditions — prepare_network","text":"'sfnetwork' object attributes 'arterialness' 'weight' account road conditions relative importance.","code":""},{"path":"https://nptscot.github.io/corenet/reference/prepare_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a network data structure by transforming, scoring, and weighting based on road types and conditions — prepare_network","text":"","code":"library(sf) library(sfnetworks) library(dplyr) library(purrr) library(zonebuilder)  # Load demo data  os_edinburgh_demo_3km = sf::st_set_crs(os_edinburgh_demo_3km, 27700) NPT_demo_3km = sf::st_set_crs(NPT_demo_3km, 27700) base_network = sf::st_transform(os_edinburgh_demo_3km, crs = 27700) influence_network = sf::st_transform(NPT_demo_3km, crs = 27700) target_zone = zonebuilder::zb_zone(\"Edinburgh\", n_circles = 2) |>                sf::st_transform(crs = \"EPSG:27700\")  # Prepare the cohesive network network = cohesive_network_prep(base_network = base_network,                                  influence_network = influence_network,                                  target_zone = target_zone,                                  key_attribute = \"road_function\",                                  attribute_values = c(\"A Road\", \"B Road\", \"Minor Road\")) #> Requested number of segments (45185) does not match the number of segments returned by rsgeo (44530). #> Warning: st_centroid assumes attributes are constant over geometries #> Joining with `by = join_by(road_function)` #> [1] \"Finished preparing the network data\"  # Define road scores road_scores = list(\"A Road\" = 1, \"B Road\" = 1, \"Minor Road\" = 100000)  # Prepare the network prepared_network = prepare_network(network,                                      key_attribute = \"all_fastest_bicycle_go_dutch\",                                     road_scores = road_scores,                                     transform_crs = 27700)  # Print the prepared network print(prepared_network) #> # A sfnetwork with 1124 nodes and 1237 edges #> # #> # CRS:  EPSG:27700  #> # #> # An undirected multigraph with 1 component with spatially explicit edges #> # #> # A tibble: 1,237 × 12 #>    from    to road_function all_fastest_bicycle_go_dutch length_x #>   <int> <int> <chr>                                <dbl>    <dbl> #> 1     1     2 A Road                            1492380.    0.190 #> 2     3     4 Minor Road                            909.  321.    #> 3     5     6 A Road                               8328.   34.0   #> 4     7     8 A Road                               5767.   49.1   #> 5     9    10 A Road                              10883.   26.0   #> 6    11    12 Minor Road                           8661.   33.7   #> # ℹ 1,231 more rows #> # ℹ 7 more variables: geom <LINESTRING [m]>, value <dbl>, min_value <dbl>, #> #   max_value <dbl>, arterialness <dbl>, road_score <dbl>, weight <dbl> #> # #> # A tibble: 1,124 × 1 #>                  geom #>           <POINT [m]> #> 1 (324910.8 672963.1) #> 2 (324910.7 672963.3) #> 3     (327256 672497) #> # ℹ 1,121 more rows"},{"path":"https://nptscot.github.io/corenet/reference/removeDangles.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove dangling segments from a road network — removeDangles","title":"Remove dangling segments from a road network — removeDangles","text":"function identifies removes dangling line segments (lines one end connected another line) within specified tolerance.","code":""},{"path":"https://nptscot.github.io/corenet/reference/removeDangles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove dangling segments from a road network — removeDangles","text":"","code":"removeDangles(network, tolerance = 0.001)"},{"path":"https://nptscot.github.io/corenet/reference/removeDangles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove dangling segments from a road network — removeDangles","text":"network sf object class LINESTRING representing road network. tolerance distance tolerance identifying isolated endpoints dangling.","code":""},{"path":"https://nptscot.github.io/corenet/reference/removeDangles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove dangling segments from a road network — removeDangles","text":"sf object dangling line segments removed.","code":""}]
